import pandas as pd
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command
import asyncio
import os
import logging
from datetime import datetime, timedelta
import aiohttp
import nest_asyncio
from collections import defaultdict
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event loop
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º
PROGRAMS = {
    "hse": {
        "name": "üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_Economy_O.xlsx",
        "priority": 1,
        "places": 10,
        "last_hash": None
    },
    "resh": {
        "name": "üìò –°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_RESH_O.xlsx",
        "priority": 2,
        "places": 6,
        "last_hash": None
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å–æ–∫
subscriptions = defaultdict(dict)
check_task = None

def log_user_action(user_id: int, action: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"User ID: {user_id} - Action: {action} - Time: {timestamp}")

def get_program_keyboard(include_refresh=False, include_subscribe=False, current_program=None):
    buttons = [
        [InlineKeyboardButton(text=PROGRAMS["hse"]["name"], callback_data="hse")],
        [InlineKeyboardButton(text=PROGRAMS["resh"]["name"], callback_data="resh")]
    ]
    
    if include_refresh and current_program in PROGRAMS:
        buttons.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{current_program}")])
    
    if include_subscribe and current_program in PROGRAMS:
        user_id = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        is_subscribed = subscriptions.get(user_id, {}).get(current_program, False)
        text = "üîî –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" if is_subscribed else "üîï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"subscribe_{current_program}")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def download_data(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            response.raise_for_status()
            return await response.read()

async def generate_status_message(program_key, is_update=False):
    program = PROGRAMS[program_key]
    try:
        content = await download_data(program["url"])
        current_hash = hashlib.md5(content).hexdigest()
        
        # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if is_update and program["last_hash"] == current_hash:
            return None
            
        program["last_hash"] = current_hash
        df = pd.read_excel(BytesIO(content), engine='openpyxl', header=None)
        
        if df.shape[1] < 32:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
        
        report_datetime = df.iloc[4, 5] if pd.notna(df.iloc[4, 5]) else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        if pd.api.types.is_datetime64_any_dtype(df.iloc[4, 5]):
            report_datetime = report_datetime.strftime("%d.%m.%Y %H:%M")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        filtered = df[
            (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
            (df[11].astype(str).str.strip() == str(program["priority"]))
        ].copy()
        
        if filtered.empty:
            return None
        
        filtered = filtered.sort_values(by=18, ascending=False)
        filtered['rank'] = range(1, len(filtered) + 1)
        
        applicant = filtered[filtered[1].astype(str).str.strip() == "4272684"]
        if applicant.empty:
            return None
        
        rank = applicant['rank'].values[0]
        score = applicant[18].values[0]
        
        other_priority = 1 if program["priority"] == 2 else 2
        filtered_other = df[
            (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
            (df[11].astype(str).str.strip() == str(other_priority))
        ].copy()
        
        count_higher = len(filtered_other[filtered_other[18] > score]) if not filtered_other.empty else 0
        
        if is_update:
            return (
                f"üîî *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö*\n"
                f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program['name']}\n"
                f"–î–∞—Ç–∞: {report_datetime}\n\n"
                f"üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {rank}\n"
                f"üî∫ –í—ã—à–µ —Å –¥—Ä. –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: {count_higher}"
            )
        else:
            return (
                f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program['name']}\n"
                f"–î–∞—Ç–∞: {report_datetime}\n\n"
                f"üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {rank}\n"
                f"üî∫ –í—ã—à–µ —Å –¥—Ä. –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: {count_higher}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

async def check_updates(bot: Bot):
    while True:
        try:
            await asyncio.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            
            for program_key in PROGRAMS:
                update_msg = await generate_status_message(program_key, is_update=True)
                if update_msg:
                    for user_id, programs in subscriptions.items():
                        if program_key in programs and programs[program_key]:
                            try:
                                await bot.send_message(
                                    user_id,
                                    update_msg,
                                    parse_mode=ParseMode.MARKDOWN,
                                    reply_markup=get_program_keyboard(
                                        include_refresh=True,
                                        include_subscribe=True,
                                        current_program=program_key
                                    )
                                )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_updates: {e}")

async def start(message: types.Message):
    log_user_action(message.from_user.id, "Started bot")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:",
        reply_markup=get_program_keyboard()
    )

async def process_program(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    if callback.data.startswith("refresh_"):
        key = callback.data.split("_")[1]
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞–µ–º...")
    elif callback.data.startswith("subscribe_"):
        key = callback.data.split("_")[1]
        subscriptions[user_id][key] = not subscriptions[user_id].get(key, False)
        action = "–ø–æ–¥–ø–∏—Å–∞–Ω" if subscriptions[user_id][key] else "–æ—Ç–ø–∏—Å–∞–Ω"
        await callback.answer(f"–í—ã {action}")
        return
    else:
        key = callback.data
    
    if key not in PROGRAMS:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞")
        return
        
    program = PROGRAMS[key]
    log_user_action(user_id, f"Selected: {program['name']}")
    
    try:
        await callback.answer()
        msg = await callback.message.answer("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        status_msg = await generate_status_message(key)
        if status_msg:
            await callback.message.edit_text(
                status_msg,
                reply_markup=get_program_keyboard(
                    include_refresh=True,
                    include_subscribe=True,
                    current_program=key
                )
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                reply_markup=get_program_keyboard(
                    include_refresh=True,
                    current_program=key
                )
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            reply_markup=get_program_keyboard(
                include_refresh=True,
                current_program=key
            )
        )

async def on_startup(bot: Bot):
    global check_task
    check_task = asyncio.create_task(check_updates(bot))

async def on_shutdown(bot: Bot):
    if check_task:
        check_task.cancel()
    await bot.session.close()

async def main():
    bot = Bot(token=TOKEN)
    dp = Dispatcher()
    
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    dp.message.register(start, Command("start"))
    dp.callback_query.register(process_program)
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())