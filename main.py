import pandas as pd
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
import asyncio
import os
import logging
from datetime import datetime
import aiohttp
import nest_asyncio
from collections import defaultdict
import hashlib
from bs4 import BeautifulSoup
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event loop
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º (—Ç–æ–ª—å–∫–æ –ú–ì–£)
PROGRAMS = {
    "mgu": {
        "name": "üèõÔ∏è –≠–∫–æ–Ω–æ–º–∏–∫–∞ (–ú–ì–£)",
        "type": "mgu",
        "url": "https://cpk.msu.ru/rating/dep_14#14_02_1_04_1",  # URL –¥–ª—è –∫–≤–æ—Ç—ã 1
        "url_quota2": "https://cpk.msu.ru/rating/dep_14#14_02_1_04_2",  # URL –¥–ª—è –∫–≤–æ—Ç—ã 2
        "places": 17,
        "user_id": "129025",
        "last_hash": None,
        "last_rank": None,
        "last_bvi_consents": None,
        "last_higher_consents": None,
        "last_update": None
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = set()
check_task = None

def format_change(current, previous):
    if previous is None:
        return ""
    change = current - previous
    if change == 0:
        return " (–Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)"
    elif change > 0:
        return f" (+{change})"
    else:
        return f" ({change})"

def log_user_action(user_id: int, action: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"User ID: {user_id} - Action: {action} - Time: {timestamp}")

def get_reply_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º"""
    keyboard = [
        [types.KeyboardButton(text="üèõÔ∏è –ú–ì–£ –≠–∫–æ–Ω–æ–º–∏–∫–∞")]
    ]
    return types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        is_persistent=True
    )

async def download_data(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            response.raise_for_status()
            return await response.read()

async def parse_mgu_page(url):
    """–ü–∞—Ä—Å–∏–Ω–≥ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ú–ì–£"""
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            response.raise_for_status()
            return await response.text()

def extract_date_from_mgu_html(html_content):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ HTML –ú–ì–£"""
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # –ò—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å –¥–∞—Ç–æ–π
    date_paragraph = soup.find('p', string=lambda text: text and '–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞:' in text)
    if date_paragraph:
        date_text = date_paragraph.get_text()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
        match = re.search(r'–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞: (.+)', date_text)
        if match:
            return match.group(1).strip()
    
    return "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

def parse_mgu_table(html_content, table_id):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –ú–ì–£ –ø–æ ID"""
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω—É–∂–Ω—ã–º ID
    header = soup.find(id=table_id)
    if not header:
        return None, None
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    table = header.find_next('table')
    if not table:
        return None, None
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
    date_p = header.find_next('p')
    date = extract_date_from_mgu_html(str(date_p)) if date_p else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    
    # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É
    rows = table.find_all('tr')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    data = []
    
    for row in rows:
        cells = row.find_all('td')
        if len(cells) >= 8:  # –ú–∏–Ω–∏–º—É–º 8 —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–≤–æ—Ç—ã 1
            row_data = []
            for cell in cells:
                row_data.append(cell.get_text().strip())
            data.append(row_data)
    
    return data, date

async def process_mgu_data(program_key, user_id=None, is_update=False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ú–ì–£"""
    program = PROGRAMS[program_key]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–±–µ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        html1 = await parse_mgu_page(program["url"])
        html2 = await parse_mgu_page(program["url_quota2"])
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        current_hash = hashlib.md5((html1 + html2).encode()).hexdigest()
        
        if is_update and program["last_hash"] == current_hash:
            return None
        
        # –ü–∞—Ä—Å–∏–º –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã
        quota1_data, date1 = parse_mgu_table(html1, "14_02_1_04_1")
        quota2_data, date2 = parse_mgu_table(html2, "14_02_1_04_2")
        
        if not quota1_data or not quota2_data:
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        report_datetime = date1
        
        # –ü–æ–¥—Å—á–µ—Ç –ë–í–ò —Å–æ–≥–ª–∞—Å–∏–π (–∫–≤–æ—Ç–∞ 1)
        bvi_consents = 0
        for row in quota1_data:
            if len(row) >= 4:
                consent = row[2].strip()  # 3-–π —Å—Ç–æ–ª–±–µ—Ü (—Å–æ–≥–ª–∞—Å–∏–µ)
                priority = row[3].strip()  # 4-–π —Å—Ç–æ–ª–±–µ—Ü (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                
                if consent.upper() == "–î–ê" and priority == "1":
                    bvi_consents += 1
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–≤–æ—Ç–µ 2 –∏ –µ–≥–æ –±–∞–ª–ª
        user_score = None
        for row in quota2_data:
            if len(row) >= 8:
                user_id_col = row[1].strip()  # 2-–π —Å—Ç–æ–ª–±–µ—Ü (ID)
                if user_id_col == program["user_id"]:
                    user_score = int(row[7].strip())  # 8-–π —Å—Ç–æ–ª–±–µ—Ü (—Å—É–º–º–∞ –±–∞–ª–ª–æ–≤)
                    break
        
        if user_score is None:
            return None
        
        # –ü–æ–¥—Å—á–µ—Ç –ª—é–¥–µ–π —Å –±–∞–ª–ª–æ–º –≤—ã—à–µ –∏ —Å–æ–≥–ª–∞—Å–∏–µ–º (–∫–≤–æ—Ç–∞ 2)
        higher_consents = 0
        for row in quota2_data:
            if len(row) >= 8:
                consent = row[2].strip()  # 3-–π —Å—Ç–æ–ª–±–µ—Ü (—Å–æ–≥–ª–∞—Å–∏–µ)
                priority = row[3].strip()  # 4-–π —Å—Ç–æ–ª–±–µ—Ü (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                score = int(row[7].strip()) if row[7].strip().isdigit() else 0  # 8-–π —Å—Ç–æ–ª–±–µ—Ü
                
                if (consent.upper() == "–î–ê" and 
                    priority == "1" and 
                    score > user_score):
                    higher_consents += 1
        
        # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞
        current_position = bvi_consents + higher_consents + 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        if is_update:
            bvi_change = format_change(bvi_consents, program["last_bvi_consents"])
            higher_change = format_change(higher_consents, program["last_higher_consents"])
            position_change = format_change(current_position, program["last_rank"])
            
            result_msg = (
                f"üîî *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö*\n"
                f"üìå *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {program['name']}\n\n"
                f"üìÖ *–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:* {report_datetime}\n\n"
                f"üéØ –ú–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ: *{program['places']}*\n\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–∏–π —É –ë–í–ò: *{bvi_consents}{bvi_change}*\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–∏–π —É –ª—é–¥–µ–π —Å –±–∞–ª–ª–æ–º –≤—ã—à–µ: *{higher_consents}{higher_change}*\n\n"
                f"üèÜ –¢–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ: *{current_position}{position_change}*"
            )
        else:
            result_msg = (
                f"üìå *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {program['name']}\n\n"
                f"üìÖ *–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:* {report_datetime}\n\n"
                f"üéØ –ú–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ: *{program['places']}*\n\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–∏–π —É –ë–í–ò: *{bvi_consents}*\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–∏–π —É –ª—é–¥–µ–π —Å –±–∞–ª–ª–æ–º –≤—ã—à–µ: *{higher_consents}*\n\n"
                f"üèÜ –¢–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ: *{current_position}*"
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        program["last_hash"] = current_hash
        program["last_rank"] = current_position
        program["last_bvi_consents"] = bvi_consents
        program["last_higher_consents"] = higher_consents
        program["last_update"] = datetime.now()
        
        return result_msg
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ú–ì–£: {e}")
        return None

async def process_data(program_key, user_id=None, is_update=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    program = PROGRAMS.get(program_key)
    if not program:
        return None
    
    if program["type"] == "mgu":
        return await process_mgu_data(program_key, user_id, is_update)
    
    return None

async def check_updates(bot: Bot):
    while True:
        try:
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
            for program_key in PROGRAMS:
                update_msg = await process_data(program_key, is_update=True)
                if update_msg:
                    for user_id in list(active_users):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        try:
                            await bot.send_message(
                                user_id,
                                update_msg,
                                parse_mode=ParseMode.MARKDOWN
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                            # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            active_users.discard(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_updates: {e}")

async def start(message: types.Message):
    user_id = message.from_user.id
    active_users.add(user_id)
    log_user_action(user_id, "Started bot")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:",
        reply_markup=get_reply_keyboard()
    )

async def handle_program_selection(message: types.Message):
    user_id = message.from_user.id
    active_users.add(user_id)
    
    program_mapping = {
        "üèõÔ∏è –ú–ì–£ –≠–∫–æ–Ω–æ–º–∏–∫–∞": "mgu"
    }
    
    key = program_mapping.get(message.text)
    if key is None:
        if message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return
    
    program = PROGRAMS.get(key)
    if not program:
        await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    log_user_action(user_id, f"Selected program: {program['name']}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...")
        
        status_msg = await process_data(key, user_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.delete()
        
        if status_msg:
            await message.answer(
                status_msg,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def on_startup(bot: Bot):
    global check_task
    check_task = asyncio.create_task(check_updates(bot))

async def on_shutdown(bot: Bot):
    if check_task:
        check_task.cancel()
    await bot.session.close()

async def main():
    bot = Bot(token=TOKEN)
    dp = Dispatcher()
    
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    dp.message.register(start, Command("start"))
    dp.message.register(handle_program_selection, F.text.in_([
        "üèõÔ∏è –ú–ì–£ –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
    ]))
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
