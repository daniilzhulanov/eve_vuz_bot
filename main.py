import pandas as pd
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
import asyncio
import os
import logging
import aiohttp
import nest_asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
nest_asyncio.apply()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –í–®–≠
HSE_PROGRAMS = {
    "hse": {
        "name": "–≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_Economy_O.xlsx",
        "priority": 1,
        "places": 10
    },
    "resh": {
        "name": "–°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_RESH_O.xlsx",
        "priority": 2,
        "places": 6
    }
}

# –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞"), KeyboardButton(text="üìò –°–æ–≤–±–∞–∫")]
        ],
        resize_keyboard=True,
        persistent=True
    )

def get_back_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –í–®–≠:",
        reply_markup=get_main_keyboard()
    )

async def handle_back(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –í–®–≠:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º –í–®–≠
async def process_hse_program(message: types.Message):
    user_id = message.from_user.id
    key = None
    
    if message.text == "üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞":
        key = "hse"
    elif message.text == "üìò –°–æ–≤–±–∞–∫":
        key = "resh"
    
    if not key or key not in HSE_PROGRAMS:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return
        
    program = HSE_PROGRAMS[key]
    
    try:
        logger.info(f"User {user_id} selected: {program['name']}")
        msg = await message.answer(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ: {program['name']}", reply_markup=get_back_keyboard())

        async with aiohttp.ClientSession() as session:
            async with session.get(program['url'], timeout=10) as response:
                content = await response.read()
                df = pd.read_excel(BytesIO(content), engine='openpyxl', header=None)

        if df.shape[1] < 19:
            await message.answer("‚ùå –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤.")
            return

        report_datetime = df.iloc[4, 5] if pd.notna(df.iloc[4, 5]) else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        if pd.api.types.is_datetime64_any_dtype(df.iloc[4, 5]):
            report_datetime = report_datetime.strftime("%d.%m.%Y %H:%M")
        
        target_priority = program["priority"]
        places = program["places"]
        result_msg = f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {report_datetime}\nüéØ –ú–µ—Å—Ç: {places}\n\n"
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        filtered = df[
            (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
            (df[11].astype(str).str.strip() == str(target_priority))
        ].copy()

        if filtered.empty:
            await message.answer(f"‚ö†Ô∏è –ù–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å {target_priority} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º")
            return

        filtered = filtered.sort_values(by=18, ascending=False)
        filtered['rank'] = range(1, len(filtered) + 1)

        # –ü–æ–∏—Å–∫ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
        applicant = filtered[filtered[1].astype(str).str.strip() == "4272684"]  
        if applicant.empty:
            await message.answer(f"üö´ –ù–æ–º–µ—Ä 4272684 –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {target_priority} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
            return

        rank = applicant['rank'].values[0]
        score = applicant[18].values[0]
        result_msg += f"‚úÖ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {rank}\nüî¢ –í–∞—à –±–∞–ª–ª: {score}"

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        other_priority = 2 if target_priority == 1 else 1
        other_df = df[
            (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
            (df[11].astype(str).str.strip() == str(other_priority))
        ]

        if not other_df.empty:
            higher_others = len(other_df[other_df[18] > score])
            result_msg += f"\n\nüî∫ –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å {other_priority} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: {higher_others}"

        await message.answer(result_msg)

    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        bot = Bot(token=TOKEN)
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dp.message.register(start, F.text == "/start")
        dp.message.register(handle_back, F.text == "üîô –ù–∞–∑–∞–¥")
        dp.message.register(process_hse_program, F.text.in_(["üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞", "üìò –°–æ–≤–±–∞–∫"]))
        
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
