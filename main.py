import os
import logging
from datetime import datetime
import requests
import pandas as pd
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
USER_ID = "4272684"

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º
PROGRAMS = {
    "hse": {
        "name": "üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_Economy_O.xlsx",
        "priority": 1,
        "places": 10
    },
    "resh": {
        "name": "üìò –°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_RESH_O.xlsx",
        "priority": 2,
        "places": 6
    }
}

def download_excel_file(url):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Excel —Ñ–∞–π–ª –ø–æ URL"""
    try:
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        return BytesIO(response.content)
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {url}: {e}")
        return None

def analyze_program_data(program_key):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    program = PROGRAMS[program_key]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    excel_file = download_excel_file(program["url"])
    if not excel_file:
        return None
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(excel_file, engine='openpyxl')
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –°—Ç–æ–ª–±–µ—Ü B (–∏–Ω–¥–µ–∫—Å 1) - –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞
        # –°—Ç–æ–ª–±–µ—Ü J (–∏–Ω–¥–µ–∫—Å 9) - —Å—Ç–∞—Ç—É—Å "–î–∞"
        # –°—Ç–æ–ª–±–µ—Ü L (–∏–Ω–¥–µ–∫—Å 11) - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        # –°—Ç–æ–ª–±–µ—Ü S (–∏–Ω–¥–µ–∫—Å 18) - –±–∞–ª–ª
        
        user_row = df[df.iloc[:, 1].astype(str) == USER_ID]
        
        if user_row.empty:
            return {
                "error": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {USER_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã"
            }
        
        user_data = user_row.iloc[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ 10 —Å—Ç–æ–ª–±—Ü–µ "–î–∞"
        if str(user_data.iloc[9]).strip().lower() != "–¥–∞":
            return {
                "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º (10 —Å—Ç–æ–ª–±–µ—Ü –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '–î–∞')"
            }
        
        user_priority = int(user_data.iloc[11])  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_score = float(user_data.iloc[18])   # –±–∞–ª–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ: —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ–≥–æ –≤ 10 —Å—Ç–æ–ª–±—Ü–µ "–î–∞"
        valid_candidates = df[df.iloc[:, 9].astype(str).str.strip().str.lower() == "–¥–∞"].copy()
        
        # –°—á–∏—Ç–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        same_priority = valid_candidates[valid_candidates.iloc[:, 11] == user_priority]
        same_priority_better = same_priority[same_priority.iloc[:, 18] > user_score]
        rank_in_priority = len(same_priority_better) + 1
        
        # –°—á–∏—Ç–∞–µ–º –ª—é–¥–µ–π —Å –¥—Ä—É–≥–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ
        if user_priority == 1:
            other_priority = 2
        else:
            other_priority = 1
            
        other_priority_candidates = valid_candidates[valid_candidates.iloc[:, 11] == other_priority]
        other_priority_better = other_priority_candidates[other_priority_candidates.iloc[:, 18] > user_score]
        other_priority_count = len(other_priority_better)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        update_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        return {
            "update_time": update_time,
            "places": program["places"],
            "user_priority": user_priority,
            "rank_in_priority": rank_in_priority,
            "other_priority_count": other_priority_count,
            "other_priority": other_priority
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data='hse')],
        [InlineKeyboardButton("üìò –°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®", callback_data='resh')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏:',
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    program_key = query.data
    
    if program_key not in PROGRAMS:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        return
    
    program = PROGRAMS[program_key]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    result = analyze_program_data(program_key)
    
    if not result:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if "error" in result:
        await query.edit_message_text(f"‚ùå {result['error']}")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    message = f"""üìä {program['name']}

üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {result['update_time']}
üéØ –ú–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {result['places']}
‚úÖ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ {result['user_priority']} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {result['rank_in_priority']}
üî∫ –õ—é–¥–µ–π —Å {result['other_priority']} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: {result['other_priority_count']}"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    keyboard = [
        [InlineKeyboardButton("üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data='hse')],
        [InlineKeyboardButton("üìò –°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®", callback_data='resh')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, reply_markup=reply_markup)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
