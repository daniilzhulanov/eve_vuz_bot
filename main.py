import pandas as pd
import requests
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
import asyncio
import os
import logging
from datetime import datetime
import aiohttp
import nest_asyncio


# –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å event loop
nest_asyncio.apply()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º
PROGRAMS = {
    "hse": {
        "name": "üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_Economy_O.xlsx",
        "priority": 1,
        "places": 10
    },
    "resh": {
        "name": "üìò –°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_RESH_O.xlsx",
        "priority": 2,
        "places": 6
    }
}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–µ—Ä–µ–¥ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
def log_user_action(user_id: int, action: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"User ID: {user_id} - Action: {action} - Time: {timestamp}")


def get_program_keyboard(include_refresh=False, current_program=None):
    buttons = [
        [InlineKeyboardButton(text=PROGRAMS["hse"]["name"], callback_data="hse")],
        [InlineKeyboardButton(text=PROGRAMS["resh"]["name"], callback_data="resh")]
    ]
    
    if include_refresh and current_program in PROGRAMS:
        buttons.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"refresh_{current_program}")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(message: types.Message):
    log_user_action(message.from_user.id, "Started bot")
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:", reply_markup=get_program_keyboard())

async def process_program(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if callback.data.startswith("refresh_"):
        key = callback.data.split("_")[1]
        await callback.answer("–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
    else:
        key = callback.data
    
    if key not in PROGRAMS:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        return
        
    program = PROGRAMS[key]
    
    try:
        log_user_action(user_id, f"Selected program: {program['name']}")
        await callback.answer()
        msg = await callback.message.answer(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ: *{program['name']}*", parse_mode=ParseMode.MARKDOWN)

        try:
            log_user_action(user_id, f"Downloading data from {program['url']}")
            async with aiohttp.ClientSession() as session:
                async with session.get(program['url'], timeout=10) as response:
                    response.raise_for_status()
                    content = await response.read()
                    df = pd.read_excel(BytesIO(content), engine='openpyxl', header=None)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)[:200]}"
            log_user_action(user_id, error_msg)
            await callback.message.answer(f"‚ùå {error_msg}", reply_markup=get_program_keyboard(include_refresh=True, current_program=key))
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (32)
        if df.shape[1] < 32:
            error_msg = f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å 32)."
            log_user_action(user_id, error_msg)
            await callback.message.answer(f"‚ùå {error_msg}", reply_markup=get_program_keyboard(include_refresh=True, current_program=key))
            return
        
        try:
            report_datetime = df.iloc[4, 5] if pd.notna(df.iloc[4, 5]) else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            if pd.api.types.is_datetime64_any_dtype(df.iloc[4, 5]):
                report_datetime = report_datetime.strftime("%d.%m.%Y %H:%M")
            
            target_priority = program["priority"]
            places = program["places"]
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–æ–≥–ª–∞—Å–∏—é ("–î–ê") –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            filtered = df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
                (df[11].astype(str).str.strip() == str(target_priority))
            ].copy()
        
            if filtered.empty:
                log_user_action(user_id, f"No applicants with priority {target_priority}")
                await callback.message.answer(f"‚ö†Ô∏è –ù–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {target_priority}.", 
                                           reply_markup=get_program_keyboard(include_refresh=True, current_program=key))
                return
        
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–ª–∞–º (–ø–æ —É–±—ã–≤–∞–Ω–∏—é) –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–≥–∏
            filtered = filtered.sort_values(by=18, ascending=False)
            filtered['rank'] = range(1, len(filtered) + 1)
        
            # –ò—â–µ–º –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ —Å ID 4272684
            applicant = filtered[filtered[1].astype(str).str.strip() == "4272684"]  
            if applicant.empty:
                log_user_action(user_id, "Applicant 4272684 not found")
                await callback.message.answer("üö´ –ù–æ–º–µ—Ä 4272684 –Ω–µ –Ω–∞–π–¥–µ–Ω.", 
                                           reply_markup=get_program_keyboard(include_refresh=True, current_program=key))
                return
        
            rank = applicant['rank'].values[0]
            score = applicant[18].values[0]
        
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result_msg = (
                f"üìÖ *–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:* {report_datetime}\n\n"
                f"üéØ –ú–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ: *{places}*\n\n"
                f"‚úÖ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ {target_priority} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: *{rank}*"
            )
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å –¥—Ä—É–≥–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            other_priority = 1 if target_priority == 2 else 2
            filtered_other = df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
                (df[11].astype(str).str.strip() == str(other_priority))
            ].copy()
        
            if not filtered_other.empty:
                higher_other = filtered_other[filtered_other[18] > score]
                count_higher = len(higher_other)
                result_msg += f"\n\nüî∫ –õ—é–¥–µ–π —Å {other_priority} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: *{count_higher}*"
            else:
                result_msg += f"\n\nüî∫ –õ—é–¥–µ–π —Å {other_priority} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: *0*"
        
            log_user_action(user_id, "Successfully processed request")
            await callback.message.answer(result_msg, 
                                        parse_mode=ParseMode.MARKDOWN, 
                                        reply_markup=get_program_keyboard(include_refresh=True, current_program=key))
        
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)[:200]}"
            log_user_action(user_id, error_msg)
            await callback.message.answer(f"‚ùå {error_msg}", 
                                        reply_markup=get_program_keyboard(include_refresh=True, current_program=key))

    except Exception as e:
        logger.exception("Unexpected error in process_program")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", 
                                    reply_markup=get_program_keyboard(include_refresh=True, current_program=key))

async def main():
    try:
        logger.info("Starting bot...")
        bot = Bot(token=TOKEN)
        dp = Dispatcher()
        
        dp.message.register(start, F.text == "/start")
        dp.callback_query.register(process_program, F.data.startswith("hse") | F.data.startswith("resh") | F.data.startswith("refresh_"))
        
        await dp.start_polling(bot)
    except asyncio.CancelledError:
        logger.info("Bot stopped by cancellation")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
        raise
    finally:
        if 'bot' in locals():
            await bot.session.close()
        logger.info("Bot fully stopped")

if __name__ == "__main__":
    asyncio.run(main())
