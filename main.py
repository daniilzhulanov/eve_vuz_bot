import os
import pandas as pd
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º
PROGRAMS = {
    "hse": {
        "name": "üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_Economy_O.xlsx",
        "priority": 1,
        "places": 10
    },
    "resh": {
        "name": "üìò –°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_RESH_O.xlsx",
        "priority": 2,
        "places": 6
    }
}

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
USER_ID = 4272684

def download_excel(url: str):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —á–∏—Ç–∞–µ—Ç Excel-—Ñ–∞–π–ª."""
    response = requests.get(url)
    response.raise_for_status()
    return pd.read_excel(response.content, header=None, engine='openpyxl')

def process_data(df: pd.DataFrame, program_code: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        report_datetime = df.iloc[4, 5]
        if pd.isna(report_datetime):
            report_datetime_str = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        elif pd.api.types.is_datetime64_any_dtype(report_datetime):
            report_datetime_str = report_datetime.strftime("%d.%m.%Y %H:%M:%S")
        else:
            report_datetime_str = str(report_datetime)
    except:
        report_datetime_str = "–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    consent_col = 9  # –°—Ç–æ–ª–±–µ—Ü —Å —Å–æ–≥–ª–∞—Å–∏–µ–º (–∏–Ω–¥–µ–∫—Å 9)
    priority_col = 11  # –°—Ç–æ–ª–±–µ—Ü —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (–∏–Ω–¥–µ–∫—Å 11)
    score_col = 18  # –°—Ç–æ–ª–±–µ—Ü —Å –±–∞–ª–ª–∞–º–∏ (–∏–Ω–¥–µ–∫—Å 18)
    id_col = 1  # –°—Ç–æ–ª–±–µ—Ü —Å ID (–∏–Ω–¥–µ–∫—Å 1)

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    has_consent = (df[consent_col] == "–î–∞")
    current_priority = PROGRAMS[program_code]["priority"]
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    priority_df = df[has_consent & (df[priority_col] == current_priority)].copy()
    priority_df.sort_values(by=score_col, ascending=False, inplace=True)
    priority_df['rank'] = range(1, len(priority_df) + 1
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_row = priority_df[priority_df[id_col] == USER_ID]
    user_rank = user_row['rank'].values[0] if not user_row.empty else None
    user_score = user_row[score_col].values[0] if not user_row.empty else None

    # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã —Å –¥—Ä—É–≥–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    other_priority = 2 if current_priority == 1 else 1
    competitors = df[
        has_consent & 
        (df[priority_col] == other_priority) & 
        (df[score_col] > user_score)
    ]
    
    return {
        "date": report_datetime_str,
        "places": PROGRAMS[program_code]["places"],
        "user_rank": user_rank,
        "competitors_count": len(competitors)
    }

def get_program_info(program_code: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
    try:
        df = download_excel(PROGRAMS[program_code]["url"])
        data = process_data(df, program_code)
        
        if data["user_rank"] is None:
            return "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ"
            
        return (
            f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {data['date']}\n\n"
            f"üéØ –ú–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {data['places']}\n\n"
            f"‚úÖ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ {PROGRAMS[program_code]['priority']} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {data['user_rank']}\n\n"
            f"üî∫ –õ—é–¥–µ–π —Å {3 - PROGRAMS[program_code]['priority']} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: {data['competitors_count']}"
        )
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
def start(update: Update, context: CallbackContext) -> None:
    buttons = [
        [KeyboardButton(PROGRAMS["hse"]["name"])],
        [KeyboardButton(PROGRAMS["resh"]["name"])]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=reply_markup)

def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    if text == PROGRAMS["hse"]["name"]:
        message = get_program_info("hse")
    elif text == PROGRAMS["resh"]["name"]:
        message = get_program_info("resh")
    else:
        message = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
    update.message.reply_text(message)

def main() -> None:
    TOKEN = os.environ.get("TOKEN")
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")
    
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
