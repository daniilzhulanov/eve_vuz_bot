import pandas as pd
import requests
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
import asyncio
import os
import logging
from datetime import datetime
import aiohttp
import nest_asyncio
from bs4 import BeautifulSoup
from aiogram.exceptions import TelegramRetryAfter

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å event loop
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def log_user_action(user_id: int, action: str):
    logger.info(f"User {user_id}: {action}")

TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º –í–®–≠
HSE_PROGRAMS = {
    "hse": {
        "name": "–≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_Economy_O.xlsx",
        "priority": 1,
        "places": 10
    },
    "resh": {
        "name": "–°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_RESH_O.xlsx",
        "priority": 2,
        "places": 6
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ú–ì–£
MSU_SETTINGS = {
    "url": "https://cpk.msu.ru/exams/",
    "target_title_part": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –î–í–ò (—á–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–æ—Ç–æ–∫) 18 –ò—é–ª—è 2025 –≥.",
    "target_surname": "–ú–ò–õ–ê–ï–í–ê",
    "check_interval": 3000,
    "notification_users": set()
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèõ –í–®–≠"), KeyboardButton(text="üè´ –ú–ì–£")]
        ],
        resize_keyboard=True,
        persistent=True
    )

def get_hse_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞"), KeyboardButton(text="üìò –°–æ–≤–±–∞–∫")],
            [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )

def get_msu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å")],
            [KeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton(text="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(message: types.Message):
    log_user_action(message.from_user.id, "Started bot")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:",
        reply_markup=get_main_keyboard()
    )

async def handle_hse(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –í–®–≠:",
        reply_markup=get_hse_keyboard()
    )

async def handle_msu(message: types.Message):
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –ú–ì–£:",
        reply_markup=get_msu_keyboard()
    )

async def handle_back(message: types.Message):
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

async def process_hse_program(message: types.Message):
    user_id = message.from_user.id
    key = None
    
    if message.text == "üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞":
        key = "hse"
    elif message.text == "üìò –°–æ–≤–±–∞–∫":
        key = "resh"
    elif message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å":
        await message.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        return
    
    if not key or key not in HSE_PROGRAMS:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return
        
    program = HSE_PROGRAMS[key]
    
    try:
        log_user_action(user_id, f"Selected program: {program['name']}")
        msg = await message.answer(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ: *{program['name']}*", parse_mode=ParseMode.MARKDOWN)

        async with aiohttp.ClientSession() as session:
            async with session.get(program['url'], timeout=10) as response:
                content = await response.read()
                df = pd.read_excel(BytesIO(content), engine='openpyxl', header=None)

        if df.shape[1] < 19:
            await message.answer("‚ùå –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤.")
            return

        report_datetime = df.iloc[4, 5] if pd.notna(df.iloc[4, 5]) else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        if pd.api.types.is_datetime64_any_dtype(df.iloc[4, 5]):
            report_datetime = report_datetime.strftime("%d.%m.%Y %H:%M")
        
        target_priority = program["priority"]
        places = program["places"]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º result_msg –≤ –Ω–∞—á–∞–ª–µ
        result_msg = f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {report_datetime}\n\nüéØ –ú–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {places}\n\n"
        
        if target_priority == 1:
            filtered_1 = df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
                (df[11].astype(str).str.strip() == "1")
            ].copy()

            if filtered_1.empty:
                await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.")
                return

            filtered_1 = filtered_1.sort_values(by=18, ascending=False)
            filtered_1['rank'] = range(1, len(filtered_1) + 1)

            applicant = filtered_1[filtered_1[1].astype(str).str.strip() == "4272684"]  
            if applicant.empty:
                await message.answer("üö´ –ù–æ–º–µ—Ä 4272684 –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")
                return

            rank = applicant['rank'].values[0]
            score = applicant[18].values[0]

            result_msg += f"‚úÖ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {rank}"

            filtered_2 = df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
                (df[11].astype(str).str.strip() == "2")
            ].copy()

            if not filtered_2.empty:
                higher_2_than_her = filtered_2[filtered_2[18] > score]
                count_higher_2 = len(higher_2_than_her)
                result_msg += f"\n\nüî∫ –õ—é–¥–µ–π —Å–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: {count_higher_2}"
            else:
                result_msg += "\n\nüî∫ –õ—é–¥–µ–π —Å–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: 0"

        else:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2 (–°–æ–≤–±–∞–∫)
            filtered_2 = df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") &  
                (df[11].astype(str).str.strip() == "2")
            ].copy()

            if filtered_2.empty:
                await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.")
                return

            filtered_2 = filtered_2.sort_values(by=18, ascending=False)
            filtered_2['rank_2'] = range(1, len(filtered_2) + 1)

            applicant = filtered_2[filtered_2[1].astype(str).str.strip() == "4272684"]  
            if applicant.empty:
                await message.answer("üö´ –ù–æ–º–µ—Ä 4272684 –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")
                return

            rank_2 = applicant['rank_2'].values[0]
            score = applicant[18].values[0]

            result_msg += f"‚úÖ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {rank_2}"

            filtered_1 = df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
                (df[11].astype(str).str.strip() == "1")
            ].copy()

            if not filtered_1.empty:
                higher_1_than_her = filtered_1[filtered_1[18] > score]
                count_higher_1 = len(higher_1_than_her)
                result_msg += f"\n\nüî∫ –õ—é–¥–µ–π —Å 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: {count_higher_1}"
            else:
                result_msg += "\n\nüî∫ –õ—é–¥–µ–π —Å 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: 0"

        await message.answer(result_msg)

    except Exception as e:
        logger.error(f"Error in process_hse_program: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)[:200]}")
async def check_msu_lists(message: types.Message):
    user_id = message.from_user.id
    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é —Å–ø–∏—Å–∫–∏ –ú–ì–£...")
    
    try:
        found = await check_msu_page()
        if found:
            await message.answer("üéâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—è–≤–∏–ª–∞—Å—å! –§–∞–º–∏–ª–∏—è –ú–ò–õ–ê–ï–í–ê –Ω–∞–π–¥–µ–Ω–∞.")
            MSU_SETTINGS["notification_users"].discard(user_id)
        else:
            await message.answer("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def subscribe_msu_notifications(message: types.Message):
    user_id = message.from_user.id
    MSU_SETTINGS["notification_users"].add(user_id)
    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–∏—Å–∫–∞—Ö –ú–ì–£")

async def unsubscribe_msu_notifications(message: types.Message):
    user_id = message.from_user.id
    MSU_SETTINGS["notification_users"].discard(user_id)
    await message.answer("üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–ø–∏—Å–∫–∞—Ö –ú–ì–£")

async def check_msu_page():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(MSU_SETTINGS["url"]) as response:
                content = await response.text()
        
        soup = BeautifulSoup(content, 'html.parser')
        exam_links = soup.find_all('a', href=True)
        
        for link in exam_links:
            if MSU_SETTINGS["target_title_part"] in link.text:
                found_page = link['href']
                if not found_page.startswith('http'):
                    found_page = MSU_SETTINGS["url"] + found_page.lstrip('/')
                
                async with aiohttp.ClientSession() as session:
                    async with session.get(found_page) as response:
                        exam_content = await response.text()
                        if MSU_SETTINGS["target_surname"] in exam_content:
                            return True
        return False
    except Exception as e:
        logger.error(f"Error checking MSU page: {e}")
        return False

async def start_msu_monitoring(bot: Bot):
    while True:
        try:
            found = await check_msu_page()
            if found and MSU_SETTINGS["notification_users"]:
                for user_id in list(MSU_SETTINGS["notification_users"]):
                    try:
                        await bot.send_message(user_id, "üö® –ü–æ—è–≤–∏–ª–∏—Å—å —Å–ø–∏—Å–∫–∏ –ú–ì–£! –§–∞–º–∏–ª–∏—è –ú–ò–õ–ê–ï–í–ê –Ω–∞–π–¥–µ–Ω–∞.")
                        MSU_SETTINGS["notification_users"].remove(user_id)
                    except Exception as e:
                        logger.error(f"Error sending notification: {e}")
            await asyncio.sleep(MSU_SETTINGS["check_interval"])
        except Exception as e:
            logger.error(f"Monitoring error: {e}")
            await asyncio.sleep(60)

async def main():
    try:
        bot = Bot(token=TOKEN)
        dp = Dispatcher()
        
        dp.message.register(start, F.text == "/start")
        dp.message.register(handle_hse, F.text == "üèõ –í–®–≠")
        dp.message.register(handle_msu, F.text == "üè´ –ú–ì–£")
        dp.message.register(handle_back, F.text == "üîô –ù–∞–∑–∞–¥")
        dp.message.register(process_hse_program, F.text.in_(["üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞", "üìò –°–æ–≤–±–∞–∫", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"]))
        dp.message.register(check_msu_lists, F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å")
        dp.message.register(subscribe_msu_notifications, F.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
        dp.message.register(unsubscribe_msu_notifications, F.text == "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
        
        asyncio.create_task(start_msu_monitoring(bot))
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
