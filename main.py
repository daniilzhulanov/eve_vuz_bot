import pandas as pd
import requests
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
import asyncio
import os
import logging
from datetime import datetime
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def get_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞"""
    token = os.environ.get("TOKEN")
    if not token or not token.startswith('') or ':' not in token:  # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")
    return token

TOKEN = get_token()

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º
PROGRAMS = {
    "hse": {
        "name": "üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_Economy_O.xlsx",
        "priority": 1,
        "places": 10
    },
    "resh": {
        "name": "üìò –°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_RESH_O.xlsx",
        "priority": 2,
        "places": 6
    }
}

def log_user_action(user_id: int, action: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"User {user_id}: {action}")

def get_program_keyboard(include_refresh=False, current_program=None):
    buttons = [
        [InlineKeyboardButton(text=PROGRAMS["hse"]["name"], callback_data="hse")],
        [InlineKeyboardButton(text=PROGRAMS["resh"]["name"], callback_data="resh")]
    ]
    
    if include_refresh and current_program in PROGRAMS:
        buttons.append([InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{current_program}")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def start(message: types.Message):
    log_user_action(message.from_user.id, "Start command")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=get_program_keyboard())

async def process_program(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    try:
        if callback.data.startswith("refresh_"):
            program_key = callback.data.split("_")[1]
            await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        else:
            program_key = callback.data
        
        if program_key not in PROGRAMS:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
            return
            
        program = PROGRAMS[program_key]
        log_user_action(user_id, f"Selected {program['name']}")
        
        await callback.message.edit_text(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö {program['name']}...")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(program['url'], timeout=30) as response:
                    response.raise_for_status()
                    content = await response.read()
                    
            with BytesIO(content) as excel_file:
                df = pd.read_excel(excel_file, engine='openpyxl', header=None)
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
            if df.shape[1] < 20:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞
            report_date = df.iloc[4, 5]
            if pd.isna(report_date):
                report_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            elif hasattr(report_date, 'strftime'):
                report_date = report_date.strftime("%d.%m.%Y %H:%M")
                
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            filtered = df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
                (df[11].astype(str).str.strip() == str(program['priority']))
            ].copy()
            
            if filtered.empty:
                raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É")
                
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
            filtered = filtered.sort_values(by=18, ascending=False)
            filtered['rank'] = range(1, len(filtered)+1)
            
            # –ü–æ–∏—Å–∫ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
            applicant = filtered[filtered[1].astype(str).str.strip() == "4272684"]
            if applicant.empty:
                raise ValueError("–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            rank = applicant['rank'].values[0]
            score = applicant[18].values[0]
            
            # –ê–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
            other_priority = 1 if program['priority'] == 2 else 2
            higher_other = len(df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
                (df[11].astype(str).str.strip() == str(other_priority)) &
                (df[18] > score)
            ])
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            message = (
                f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {report_date}\n\n"
                f"üéØ –ú–µ—Å—Ç: {program['places']}\n\n"
                f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ ({program['priority']} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç): {rank}\n\n"
                f"üî∫ –í—ã—à–µ —Å {other_priority} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: {higher_other}"
            )
            
            await callback.message.edit_text(
                message,
                reply_markup=get_program_keyboard(include_refresh=True, current_program=program_key)
            )
            
        except Exception as e:
            logger.error(f"Error processing {program['name']}: {str(e)}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}",
                reply_markup=get_program_keyboard(include_refresh=True, current_program=program_key)
            )
            
    except Exception as e:
        logger.exception("Unexpected error in callback")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def main():
    bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    
    dp.message.register(start, F.text == "/start")
    dp.callback_query.register(process_program, F.data.startswith(("hse", "resh", "refresh_")))
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
