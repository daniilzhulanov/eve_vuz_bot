from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import os
import pandas as pd
import requests
from io import BytesIO

TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

PROGRAMS = {
    "hse": {
        "name": "üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_Economy_O.xlsx",
        "priority": 1,
        "places": 10
    },
    "resh": {
        "name": "üìò –°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_RESH_O.xlsx",
        "priority": 2,
        "places": 6
    }
}

def get_program_info(program_key, user_number=4272684):
    program = PROGRAMS[program_key]
    url = program["url"]
    K = program["priority"]
    places = program["places"]
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞
    response = requests.get(url)
    if response.status_code != 200:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª."
    
    # –ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
    df = pd.read_excel(BytesIO(response.content), header=None)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫, –≥–¥–µ —Å—Ç–æ–ª–±–µ—Ü 10 (–∏–Ω–¥–µ–∫—Å 9) —Ä–∞–≤–µ–Ω "–î–∞"
    df_filtered = df[df.iloc[:, 9] == "–î–∞"]
    
    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_row = df_filtered[df_filtered.iloc[:, 1] == user_number]
    if user_row.empty:
        return "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    user_score = user_row.iloc[0, 18]
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º K
    priority_K = df_filtered[df_filtered.iloc[:, 11] == K]
    scores_K = priority_K.iloc[:, 18]
    N_higher = (scores_K > user_score).sum()
    rank = N_higher + 1
    
    # –ü–æ–¥—Å—á–µ—Ç –ª—é–¥–µ–π —Å –¥—Ä—É–≥–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –±–∞–ª–ª–æ–º
    other_priority = 3 - K
    priority_other = df_filtered[df_filtered.iloc[:, 11] == other_priority]
    num_higher_other = (priority_other.iloc[:, 18] > user_score).sum()
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: 19.07.2025 19:06:10\n\n"
    message += f"üéØ –ú–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {places}\n\n"
    message += f"‚úÖ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ {K} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {rank}\n\n"
    message += f"üî∫ –õ—é–¥–µ–π —Å {other_priority} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: {num_higher_other}"
    
    return message

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data="hse"))
    keyboard.add(types.InlineKeyboardButton("–°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®", callback_data="resh"))
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data in ["hse", "resh"])
async def process_callback(callback_query: types.CallbackQuery):
    program_key = callback_query.data
    info = get_program_info(program_key)
    await bot.send_message(callback_query.from_user.id, info)
    await callback_query.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
