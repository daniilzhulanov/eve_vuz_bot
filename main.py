import pandas as pd
import requests
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
import asyncio
import os

TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–≥—Ä–∞–º–º
PROGRAMS = {
    "hse": {
        "name": "üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_Economy_O.xlsx",
        "priority": 1,  # –£ –Ω–µ—ë 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫–µ
        "places": 10    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
    },
    "resh": {
        "name": "üìò –°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_RESH_O.xlsx",
        "priority": 2,  # –£ –Ω–µ—ë 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ —Å–æ–≤–±–∞–∫–µ
        "places": 6     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=PROGRAMS["hse"]["name"], callback_data="hse")],
    [InlineKeyboardButton(text=PROGRAMS["resh"]["name"], callback_data="resh")]
])

@dp.message(F.text == "/start")
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:", reply_markup=keyboard)

@dp.callback_query(F.data.in_(PROGRAMS.keys()))
async def process_program(callback: types.CallbackQuery):
    key = callback.data
    program = PROGRAMS[key]
    await callback.answer()
    await callback.message.answer(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ: *{program['name']}*", parse_mode=ParseMode.MARKDOWN)

    try:
        response = requests.get(program['url'], timeout=10)
        response.raise_for_status()
        df = pd.read_excel(BytesIO(response.content), header=None)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return

    if df.shape[1] < 19:
        await callback.message.answer("‚ùå –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤.")
        return

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        target_priority = program["priority"]
        places = program["places"]
        
        if target_priority == 1:
            # ===== –≠–ö–û–ù–û–ú–ò–ö–ê (1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) =====
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ª—é–¥–µ–π —Å 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            filtered_1 = df[
                (df[7].astype(str).str.strip().str.upper() == "–î–ê") &
                (df[11].astype(str).str.strip() == "1")
            ].copy()

            if filtered_1.empty:
                await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.")
                return

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–ª–∞–º
            filtered_1 = filtered_1.sort_values(by=18, ascending=False)
            filtered_1['rank'] = range(1, len(filtered_1) + 1)

            # –ò—â–µ–º –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
            applicant = filtered_1[filtered_1[1].astype(str).str.strip() == "4272684"]
            if applicant.empty:
                await callback.message.answer("üö´ –ù–æ–º–µ—Ä 4272684 –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")
                return

            rank = applicant['rank'].values[0]
            score = applicant[18].values[0]

            result_msg = f"üéØ –ú–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ: *{places}*\n\n‚úÖ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: *{rank}*"

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Å–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Å –±–∞–ª–ª–æ–º –≤—ã—à–µ
            filtered_2 = df[
                (df[7].astype(str).str.strip().str.upper() == "–î–ê") &
                (df[11].astype(str).str.strip() == "2")
            ].copy()

            if not filtered_2.empty:
                higher_2_than_her = filtered_2[filtered_2[18] > score]
                count_higher_2 = len(higher_2_than_her) + 1
                result_msg += f"\n\nüî∫ –õ—é–¥–µ–π —Å–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: *{count_higher_2}*"
            else:
                result_msg += "\n\nüî∫ –õ—é–¥–µ–π —Å–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: *0*"

        else:
            # ===== –°–û–í–ë–ê–ö (2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) =====
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ª—é–¥–µ–π —Å–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            filtered_2 = df[
                (df[7].astype(str).str.strip().str.upper() == "–î–ê") &
                (df[11].astype(str).str.strip() == "2")
            ].copy()

            if filtered_2.empty:
                await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.")
                return

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–ª–∞–º
            filtered_2 = filtered_2.sort_values(by=18, ascending=False)
            filtered_2['rank_2'] = range(1, len(filtered_2) + 1)

            # –ò—â–µ–º –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
            applicant = filtered_2[filtered_2[1].astype(str).str.strip() == "4272684"]
            if applicant.empty:
                await callback.message.answer("üö´ –ù–æ–º–µ—Ä 4272684 –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")
                return

            rank_2 = applicant['rank_2'].values[0]
            score = applicant[18].values[0]

            result_msg = f"üéØ –ú–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ: *{places}*\n\n‚úÖ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: *{rank_2}*"

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Å 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Å –±–∞–ª–ª–æ–º –≤—ã—à–µ
            filtered_1 = df[
                (df[7].astype(str).str.strip().str.upper() == "–î–ê") &
                (df[11].astype(str).str.strip() == "1")
            ].copy()

            if not filtered_1.empty:
                higher_1_than_her = filtered_1[filtered_1[18] > score]
                count_higher_1 = len(higher_1_than_her) + 1
                result_msg += f"\n\nüî∫ –õ—é–¥–µ–π —Å 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: *{count_higher_1}*"
            else:
                result_msg += "\n\nüî∫ –õ—é–¥–µ–π —Å 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: *0*"

        await callback.message.answer(result_msg, parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
