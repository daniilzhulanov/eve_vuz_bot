import logging
from telegram import ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import pandas as pd
import io
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º
PROGRAMS = {
    "hse": {
        "name": "üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_Economy_O.xlsx",
        "priority": 1,
        "places": 10
    },
    "resh": {
        "name": "üìò –°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_RESH_O.xlsx",
        "priority": 2,
        "places": 6
    }
}

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
USER_ID = 4272684

def get_excel_data(url):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞"""
    response = requests.get(url)
    return pd.read_excel(io.BytesIO(response.content), datetime.now()

def analyze_program_data(df, program_key):
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    program = PROGRAMS[program_key]
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    df = df[df[10] == "–î–∞"]  # –°—Ç–æ–ª–±–µ—Ü 10 - "–î–∞"
    df = df[df[12] == program["priority"]]  # –°—Ç–æ–ª–±–µ—Ü 12 - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_row = df[df[2] == USER_ID]
    
    if user_row.empty:
        return None
    
    user_score = user_row.iloc[0][19]  # –°—Ç–æ–ª–±–µ—Ü 19 - –±–∞–ª–ª
    
    # –†–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    priority_df = df[df[12] == program["priority"]].copy()
    priority_df['rank'] = priority_df[19].rank(ascending=False, method='min')
    user_priority_rank = int(priority_df[priority_df[2] == USER_ID]['rank'].iloc[0])
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Å –¥—Ä—É–≥–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ
    other_priority = 2 if program["priority"] == 1 else 1
    higher_priority_above = len(df[(df[12] == other_priority) & (df[19] > user_score)])
    
    return {
        "user_priority_rank": user_priority_rank,
        "higher_priority_above": higher_priority_above,
        "is_accepted": True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–∏–Ω—è—Ç
    }

def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É:",
        reply_markup=ReplyKeyboardMarkup([
            [PROGRAMS["hse"]["name"], PROGRAMS["resh"]["name"]]
        ], resize_keyboard=True, one_time_keyboard=True)
    )

def handle_program_selection(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    program_name = update.message.text
    program_key = None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∏–º–µ–Ω–∏
    for key, data in PROGRAMS.items():
        if data["name"] == program_name:
            program_key = key
            break
    
    if not program_key:
        update.message.reply_text("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        df, update_time = get_excel_data(PROGRAMS[program_key]["url"])
        analysis = analyze_program_data(df, program_key)
        
        if not analysis:
            update.message.reply_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–∞—Ö")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {update_time.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
            f"üéØ –ú–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {PROGRAMS[program_key]['places']}\n\n"
            f"‚úÖ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ {PROGRAMS[program_key]['priority']} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {analysis['user_priority_rank']}\n\n"
            f"üî∫ –õ—é–¥–µ–π —Å {2 if PROGRAMS[program_key]['priority'] == 1 else 1} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: {analysis['higher_priority_above']}"
        )
        
        update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"Error processing program data: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def error(update, context):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    logger.warning(f'Update "{update}" caused error "{context.error}"')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TOKEN = os.environ.get("TOKEN")
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

    updater = Updater("TOKEN", use_context=True)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & (~Filters.command), handle_program_selection))
    dp.add_error_handler(error)
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
