import pandas as pd
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
import asyncio
import os
import logging
import aiohttp
import nest_asyncio
from bs4 import BeautifulSoup
from aiogram.exceptions import TelegramRetryAfter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
nest_asyncio.apply()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def log_user_action(user_id: int, action: str):
    logger.info(f"User {user_id}: {action}")

TOKEN = os.environ.get("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –í–®–≠
HSE_PROGRAMS = {
    "hse": {
        "name": "–≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_Economy_O.xlsx",
        "priority": 1,
        "places": 10
    },
    "resh": {
        "name": "–°–æ–≤–±–∞–∫ –ù–ò–£ –í–®–≠ –∏ –†–≠–®",
        "url": "https://enrol.hse.ru/storage/public_report_2025/moscow/Bachelors/BD_moscow_RESH_O.xlsx",
        "priority": 2,
        "places": 6
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –°–ü–±–ì–£
SPBU_SETTINGS = {
    "base_url": "https://enrollelists.spbu.ru",
    "search_url": "https://enrollelists.spbu.ru/view-filters",
    "params": {
        "trajectory": "–ü–æ—Å—Ç—É–ø–∞—é –∫–∞–∫ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –†–§",
        "scenario": "–ü—Ä–∏—ë–º –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç–∞",
        "group": "38.03.01 –≠–∫–æ–Ω–æ–º–∏–∫–∞; –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç; –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç; –ë—é–¥–∂–µ—Ç–Ω–∞—è –æ—Å–Ω–æ–≤–∞; –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–≤–æ—Ç–∞; –≠–∫–æ–Ω–æ–º–∏–∫–∞"
    },
    "target_id": "4272684"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú–ì–£
MSU_SETTINGS = {
    "url": "https://cpk.msu.ru/exams/",
    "target_title_part": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –î–í–ò (—á–µ—Ç–≤–µ—Ä—Ç—ã–π –ø–æ—Ç–æ–∫) 18 –ò—é–ª—è 2025 –≥.",
    "target_surname": "–ú–ò–õ–ê–ï–í–ê",
    "check_interval": 300,
    "notification_users": set()
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèõ –í–®–≠"), KeyboardButton(text="üè´ –ú–ì–£"), KeyboardButton(text="üè∞ –°–ü–±–ì–£")]
        ],
        resize_keyboard=True,
        persistent=True
    )

def get_hse_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞"), KeyboardButton(text="üìò –°–æ–≤–±–∞–∫")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )

def get_msu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å")],
            [KeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton(text="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )

def get_spbu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞ –°–ü–±–ì–£")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(message: types.Message):
    log_user_action(message.from_user.id, "Started bot")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç:",
        reply_markup=get_main_keyboard()
    )

async def handle_hse(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –í–®–≠:",
        reply_markup=get_hse_keyboard()
    )

async def handle_msu(message: types.Message):
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –ú–ì–£:",
        reply_markup=get_msu_keyboard()
    )

async def handle_spbu(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –°–ü–±–ì–£:",
        reply_markup=get_spbu_keyboard()
    )

async def handle_back(message: types.Message):
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –í–®–≠
async def process_hse_program(message: types.Message):
    user_id = message.from_user.id
    key = None
    
    if message.text == "üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞":
        key = "hse"
    elif message.text == "üìò –°–æ–≤–±–∞–∫":
        key = "resh"
    
    if not key or key not in HSE_PROGRAMS:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return
        
    program = HSE_PROGRAMS[key]
    
    try:
        log_user_action(user_id, f"Selected program: {program['name']}")
        msg = await message.answer(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ: *{program['name']}*", parse_mode=ParseMode.MARKDOWN)

        async with aiohttp.ClientSession() as session:
            async with session.get(program['url'], timeout=10) as response:
                content = await response.read()
                df = pd.read_excel(BytesIO(content), engine='openpyxl', header=None)

        if df.shape[1] < 19:
            await message.answer("‚ùå –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤.")
            return

        report_datetime = df.iloc[4, 5] if pd.notna(df.iloc[4, 5]) else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        if pd.api.types.is_datetime64_any_dtype(df.iloc[4, 5]):
            report_datetime = report_datetime.strftime("%d.%m.%Y %H:%M")
        
        target_priority = program["priority"]
        places = program["places"]
        result_msg = f"üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {report_datetime}\n\nüéØ –ú–µ—Å—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {places}\n\n"
        
        if target_priority == 1:
            filtered_1 = df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
                (df[11].astype(str).str.strip() == "1")
            ].copy()

            if filtered_1.empty:
                await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.")
                return

            filtered_1 = filtered_1.sort_values(by=18, ascending=False)
            filtered_1['rank'] = range(1, len(filtered_1) + 1)

            applicant = filtered_1[filtered_1[1].astype(str).str.strip() == "4272684"]  
            if applicant.empty:
                await message.answer("üö´ –ù–æ–º–µ—Ä 4272684 –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")
                return

            rank = applicant['rank'].values[0]
            score = applicant[18].values[0]

            result_msg += f"‚úÖ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {rank}"

            filtered_2 = df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
                (df[11].astype(str).str.strip() == "2")
            ].copy()

            if not filtered_2.empty:
                higher_2_than_her = filtered_2[filtered_2[18] > score]
                count_higher_2 = len(higher_2_than_her)
                result_msg += f"\n\nüî∫ –õ—é–¥–µ–π —Å–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: {count_higher_2}"
            else:
                result_msg += "\n\nüî∫ –õ—é–¥–µ–π —Å–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: 0"

        else:
            filtered_2 = df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") &  
                (df[11].astype(str).str.strip() == "2")
            ].copy()

            if filtered_2.empty:
                await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.")
                return

            filtered_2 = filtered_2.sort_values(by=18, ascending=False)
            filtered_2['rank_2'] = range(1, len(filtered_2) + 1)

            applicant = filtered_2[filtered_2[1].astype(str).str.strip() == "4272684"]  
            if applicant.empty:
                await message.answer("üö´ –ù–æ–º–µ—Ä 4272684 –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")
                return

            rank_2 = applicant['rank_2'].values[0]
            score = applicant[18].values[0]

            result_msg += f"‚úÖ –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {rank_2}"

            filtered_1 = df[
                (df[9].astype(str).str.strip().str.upper() == "–î–ê") & 
                (df[11].astype(str).str.strip() == "1")
            ].copy()

            if not filtered_1.empty:
                higher_1_than_her = filtered_1[filtered_1[18] > score]
                count_higher_1 = len(higher_1_than_her)
                result_msg += f"\n\nüî∫ –õ—é–¥–µ–π —Å 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: {count_higher_1}"
            else:
                result_msg += "\n\nüî∫ –õ—é–¥–µ–π —Å 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –±–∞–ª–ª–æ–º –≤—ã—à–µ: 0"

        await message.answer(result_msg)

    except Exception as e:
        logger.error(f"Error in process_hse_program: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)[:200]}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –°–ü–±–ì–£
async def parse_spbu_economics(message: types.Message):
    try:
        await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ –°–ü–±–ì–£ (–≠–∫–æ–Ω–æ–º–∏–∫–∞)...")
        
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            async with session.get(SPBU_SETTINGS['search_url']) as resp:
                if resp.status != 200:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –°–ü–±–ì–£")
                    return
                
                html = await resp.text()
                soup = BeautifulSoup(html, 'html.parser')
                
                # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ CSRF-—Ç–æ–∫–µ–Ω–∞
                csrf_input = soup.find('input', {'name': '_csrf'})
                if not csrf_input:
                    await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω CSRF-—Ç–æ–∫–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    return
                
                csrf_token = csrf_input.get('value')
                if not csrf_token:
                    await message.answer("‚ùå –ü—É—Å—Ç–æ–π CSRF-—Ç–æ–∫–µ–Ω")
                    return

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            form_data = aiohttp.FormData()
            form_data.add_field('_csrf', csrf_token)
            form_data.add_field('TrajectoryFilter[trajectory]', SPBU_SETTINGS['params']['trajectory'])
            form_data.add_field('ScenarioFilter[scenario]', SPBU_SETTINGS['params']['scenario'])
            form_data.add_field('CompetitiveGroupFilter[group]', SPBU_SETTINGS['params']['group'])
            form_data.add_field('ajax', 'view-filters-form')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
            async with session.post(
                SPBU_SETTINGS['search_url'],
                data=form_data,
                headers={
                    'X-Requested-With': 'XMLHttpRequest',
                    'Referer': SPBU_SETTINGS['search_url']
                }
            ) as resp:
                if resp.status != 200:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö")
                    return
                
                try:
                    data = await resp.json()
                except:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    return

                if not data.get('success'):
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞")
                    return
                
                # –ü–∞—Ä—Å–∏–º HTML —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                html = data.get('content', '')
                if not html:
                    await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                    return
                
                soup = BeautifulSoup(html, 'html.parser')
                table = soup.find('table', {'class': 'table'})
                
                if not table:
                    await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
                    return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                rows = table.find_all('tr')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if not rows:
                    await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ")
                    return
                
                applicants = []
                for row in rows:
                    cols = row.find_all('td')
                    if len(cols) >= 6:
                        try:
                            applicant = {
                                'id': cols[0].text.strip(),
                                'priority': int(cols[3].text.strip()),
                                'score': float(cols[4].text.strip()),
                                'original': cols[5].text.strip().lower() == '–¥–∞'
                            }
                            applicants.append(applicant)
                        except (ValueError, AttributeError):
                            continue
                
                if not applicants:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤")
                    return
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º
                priority_2 = [a for a in applicants if a['priority'] == 2 and a['original']]
                if not priority_2:
                    await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º–∏")
                    return
                
                priority_2_sorted = sorted(priority_2, key=lambda x: x['score'], reverse=True)
                
                # –ò—â–µ–º –Ω–∞—à–µ–≥–æ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
                target_pos = None
                for i, applicant in enumerate(priority_2_sorted, 1):
                    if applicant['id'] == SPBU_SETTINGS['target_id']:
                        target_pos = i
                        target_score = applicant['score']
                        break
                
                if not target_pos:
                    await message.answer("üö´ –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                higher = sum(1 for a in priority_2_sorted if a['score'] > target_score)
                total = len(priority_2_sorted)
                
                report = (
                    f"üìä –°–ü–±–ì–£ –≠–∫–æ–Ω–æ–º–∏–∫–∞ (2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)\n\n"
                    f"üë§ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {target_pos} –∏–∑ {total}\n"
                    f"üéØ –í–∞—à –±–∞–ª–ª: {target_score}\n"
                    f"üîù –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏: {higher}\n"
                    f"üìå –í—Å–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤: {total}"
                )
                
                await message.answer(report)
                
    except Exception as e:
        logger.error(f"SPBU parse error: {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –°–ü–±–ì–£")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ú–ì–£
async def check_msu_lists(message: types.Message):
    user_id = message.from_user.id
    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é —Å–ø–∏—Å–∫–∏ –ú–ì–£...")
    
    try:
        found = await check_msu_page()
        if found:
            await message.answer("üéâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—è–≤–∏–ª–∞—Å—å! –§–∞–º–∏–ª–∏—è –ú–ò–õ–ê–ï–í–ê –Ω–∞–π–¥–µ–Ω–∞.")
            MSU_SETTINGS["notification_users"].discard(user_id)
        else:
            await message.answer("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def subscribe_msu_notifications(message: types.Message):
    user_id = message.from_user.id
    MSU_SETTINGS["notification_users"].add(user_id)
    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–∏—Å–∫–∞—Ö –ú–ì–£")

async def unsubscribe_msu_notifications(message: types.Message):
    user_id = message.from_user.id
    MSU_SETTINGS["notification_users"].discard(user_id)
    await message.answer("üîï –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–ø–∏—Å–∫–∞—Ö –ú–ì–£")

async def check_msu_page():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(MSU_SETTINGS["url"]) as response:
                content = await response.text()
        
        soup = BeautifulSoup(content, 'html.parser')
        exam_links = soup.find_all('a', href=True)
        
        for link in exam_links:
            if MSU_SETTINGS["target_title_part"] in link.text:
                found_page = link['href']
                if not found_page.startswith('http'):
                    found_page = MSU_SETTINGS["url"] + found_page.lstrip('/')
                
                async with aiohttp.ClientSession() as session:
                    async with session.get(found_page) as response:
                        exam_content = await response.text()
                        if MSU_SETTINGS["target_surname"] in exam_content:
                            return True
        return False
    except Exception as e:
        logger.error(f"Error checking MSU page: {e}")
        return False

async def start_msu_monitoring(bot: Bot):
    while True:
        try:
            found = await check_msu_page()
            if found and MSU_SETTINGS["notification_users"]:
                for user_id in list(MSU_SETTINGS["notification_users"]):
                    try:
                        await bot.send_message(user_id, "üö® –ü–æ—è–≤–∏–ª–∏—Å—å —Å–ø–∏—Å–∫–∏ –ú–ì–£! –§–∞–º–∏–ª–∏—è –ú–ò–õ–ê–ï–í–ê –Ω–∞–π–¥–µ–Ω–∞.")
                        MSU_SETTINGS["notification_users"].remove(user_id)
                    except Exception as e:
                        logger.error(f"Error sending notification: {e}")
            await asyncio.sleep(MSU_SETTINGS["check_interval"])
        except Exception as e:
            logger.error(f"Monitoring error: {e}")
            await asyncio.sleep(60)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        bot = Bot(token=TOKEN)
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dp.message.register(start, F.text == "/start")
        dp.message.register(handle_hse, F.text == "üèõ –í–®–≠")
        dp.message.register(handle_msu, F.text == "üè´ –ú–ì–£")
        dp.message.register(handle_spbu, F.text == "üè∞ –°–ü–±–ì–£")
        dp.message.register(handle_back, F.text == "üîô –ù–∞–∑–∞–¥")
        dp.message.register(process_hse_program, F.text.in_(["üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞", "üìò –°–æ–≤–±–∞–∫"]))
        dp.message.register(parse_spbu_economics, F.text == "üìà –≠–∫–æ–Ω–æ–º–∏–∫–∞ –°–ü–±–ì–£")
        dp.message.register(check_msu_lists, F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å")
        dp.message.register(subscribe_msu_notifications, F.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
        dp.message.register(unsubscribe_msu_notifications, F.text == "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
        
        asyncio.create_task(start_msu_monitoring(bot))
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
